{"version":3,"file":"static/webpack/static/development/pages/index.js.f92d02a2d161ff178a96.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from \"react\";\nimport Pagination from \"react-paginating\";\n\nconst fruits = [\n  [\"apple\", \"orange\"],\n  [\"banana\", \"avocado\"],\n  [\"coconut\", \"blueberry\"],\n  [\"payaya\", \"peach\"],\n  [\"pear\", \"plum\"]\n];\nconst limit = 2;\nconst pageCount = 3;\nconst total = fruits.length * limit;\n\nclass Index extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        currentPage: 1\n      };\n    }\n  \n    handlePageChange = (page, e) => {\n      this.setState({\n        currentPage: page\n      });\n    };\n  \n    render() {\n      const { currentPage } = this.state;\n      return (\n        <div>\n          <ul>\n            {fruits[currentPage - 1].map(item => (\n              <li key={item}>{item}</li>\n            ))}\n          </ul>\n          <Pagination\n            total={total}\n            limit={limit}\n            pageCount={pageCount}\n            currentPage={currentPage}\n          >\n            {({\n              pages,\n              currentPage,\n              hasNextPage,\n              hasPreviousPage,\n              previousPage,\n              nextPage,\n              totalPages,\n              getPageItemProps\n            }) => (\n              <div>\n                <button\n                  {...getPageItemProps({\n                    pageValue: 1,\n                    onPageChange: this.handlePageChange\n                  })}\n                >\n                  first\n                </button>\n  \n                {hasPreviousPage && (\n                  <button\n                    {...getPageItemProps({\n                      pageValue: previousPage,\n                      onPageChange: this.handlePageChange\n                    })}\n                  >\n                    {\"<\"}\n                  </button>\n                )}\n  \n                {pages.map(page => {\n                  let activePage = null;\n                  if (currentPage === page) {\n                    activePage = { backgroundColor: \"#fdce09\" };\n                  }\n                  return (\n                    <button\n                      {...getPageItemProps({\n                        pageValue: page,\n                        key: page,\n                        style: activePage,\n                        onPageChange: this.handlePageChange\n                      })}\n                    >\n                      {page}\n                    </button>\n                  );\n                })}\n  \n                {hasNextPage && (\n                  <button\n                    {...getPageItemProps({\n                      pageValue: nextPage,\n                      onPageChange: this.handlePageChange\n                    })}\n                  >\n                    {\">\"}\n                  </button>\n                )}\n  \n                <button\n                  {...getPageItemProps({\n                    pageValue: totalPages,\n                    onPageChange: this.handlePageChange\n                  })}\n                >\n                  last\n                </button>\n              </div>\n            )}\n          </Pagination>\n        </div>\n      );\n    }\n  }\n    \n  export default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAQA;AACA;AADA;AAGA;AACA;AAVA;AACA;AADA;AAFA;AAKA;AACA;;;AAOA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAKA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7DA;AA0EA;;;;AAvGA;AACA;AAyGA;;;;A","sourceRoot":""}